DAY-10              DATE:5-2-2025                                      



                *continuous integration*


IMPORTANCE OF CONTINUOUS INTEGRATION:-
  1) Improve quality:- 
          Improves the quality by running multiply unit test and analysing various static codes.

  2) Increases productivity:-
          Automating build of code saves a lot of time, there by increasing productivity.

  3) Reduces risk:-
          Eliminating the risk of potential human errors by automating test.



INTRODUCTION TO JENKINS:-

   -> Easy installation process 
   -> provides advance security 
   -> optimized performance
   -> upgrades are easy available
   -> light weight container support
   -> distributed team management


WHAT IS CONTINUOUS INTEGRATION:-
     It is the process of automating the building and testing of code, each time one of the team member commit changes to version control.
continuous integration, continuous delivery (or) deployment but delivery is also known as release, then first stage is CI, second stage is CD, 
and third stage is placing the artifact in the web server.

POPULAR CONTINUOUS INTEGRATION TOOLS:-

    -> Gitlab CI
    -> Code ship
    -> Bamboo
    -> Jenkins
    -> Team city
    -> Travis CI

   From the AWS cloud if we want to perform CICD, there are various services like code commit, code deploy and code guru, AWS code build, AWS pipeline.


IN AZURE CLOUD :-
    Azure devops, Azure boards, Azure repos, Azure pipeline, Azure test plans, Azure Artifact.


WHAT IS JENKINS?
       A continuous integration server which manages and control processes such as plain, code, build, test, deploy, operate and monitor in devops environment.


WHY JENKINS IS SO POPULAR?
   -> Open source
   -> Good plugins support
   -> Good community support 
   -> Fast and reliable
   -> Good OS support
   -> scripted builds


TOPICS:-

  -> Jenkins Architecture
  -> Plugin management in Jenkins
  -> Jenkins security management
  -> notification in Jenkins
  -> Jenkins master slave architecture
  -> Jenkins delivery pipeline
  -> Jenkins declarative pipeline

JENKINS ARCHITECTURE: SOURCE CONTROL MANAGEMENT
 
 * Jenkins Architecture: Source control management
 
                  git --→ Jenkins                                         
<<<<<<< HEAD
                                                                         
                            ^                            
                            ^                                             | → Test Environment
|                                                  |    |Is branch test,  |
| | Build+unitTest | → |Function Test| → |Deploy|  |    |release          | → Release Evironment
|                                                  |    |     (or)        |
                                                        | production      | → Production Environment
                                                                        
=====================================================
                            |                                             
        
>>>>>>> b4e10ec3a959acaec4d89d4f04e80a4fa9ebbfa7

PLUGIN MANAGEMENT IN JENKINS :~
 
 
              UPDATE -->shows update to already installed
 
              AVAILABLE -->show plugins that are available for installation
=>TABS
              INSTALLED -->display plugins installed that have no updates
 
              ADVANCED -->lists configuration of http proxy allows manual upload of plugin and url plugin site
 
 
In real time we cant install the plugins as simple as simple as that reasons being they meights be challanges
  with proxy settings as well as vpn (virtual private networking) in order to avoide we should configure HHTP 
  proxy in jenkins plugin of advance tab.
 
 

  HOW TO INSTALL JENKINS ON WINDOES:~
 
* using docker 
* using kubernets
* war files
* offline installation
* other servlet containers
 
 
      PREREQUISITES:~
 
 
* minimum hardware requirements
 
  * 256 MB of RAM 
  * 1 GB of drive space although 10GB is a recommand minimum it running the jenkins as a docker container.
 
 
* Recommended hardware configuration for a small team:
  * 4GB + of RAM
  * 50GB + drive space
  comrechensive hardware recommendations.
 
 
* Jankins tools is developed on java code
 
 
            PREREQUISITES:~
 
* A system running windoes 10
 
* The latest copy of java development kit or java runtime enviranment installed.
 
* Access to an account with admainistrator privillages.



INSTALL JENKINS ON WINDOWS
   
   -> Browse to the official Jenkins download page. Under the "downloading Jenkins" section is a list of installers for the long-term support (LTS) version of Jenkins.
    Click the Windows link to begin the download.
       * URL will be Jenkins.in/download/

   -> Once you click on "download windows" text, it will open a new tab saying "Thank you for downloading" and the download will start.

   -> After downloading, go to the downloads folder and double-click on the Jenkins file, which is of type "Windows installer package".

   -> The setup wizard starts. Click "Next" to proceed.

   -> Select the install destination folder and click "Next" to continue.

   -> Under the "Run service as a local or domain user" option, enter the domain username and password for the user account you want to run Jenkins with. 
        Click "Test credentials" to verify the login data, then click "Next" to proceed.
         * Select the first option: "Run service as LocalSystem"

   -> Enter the port number you want Jenkins to run on. Click "Test port" to check if the selected port is available, then click "Next" to continue.
         * Default port of Jenkins is 8080

   -> Select the directory where Java is installed on your system and click "Next" to proceed.

   -> Select the features you want to install with Jenkins and click "Next" to continue.

   -> Click "Install" to start the installation process.



    ## After completion of the installation process, you have to unblock Jenkins before you can customize and start using it.localhost: 8080 , 127.0.0.1:8080.

    1) In your web browser, navigate to the port number you selected during the installation using the following address:
           http://localhost:[port number]
               127.0.0.1:8080

    2) Navigate to the location on your system specified by the "Unlock Jenkins" page.
            & Please copy the password
          C:\ProgramData\Jenkins.jenkins\secrets\initialAdminPassword

         Where "initial Admin Password" is a file.

            In order to read the data of that file, use the "cat" command.
              At the command prompt:
          "cat C:\ProgramData\Jenkins.jenkins\secrets\initialAdminPassword"

    3) Copy the password from the "initial Admin Password" file.

    4) Paste the password in the "Administrator password" field on the "Unlock Jenkins" page and click "Continue" to proceed.


       CUSTOMER JENKINS:

   * Click the "Install suggested plugins" button to have Jenkins automatically install the most frequently used plugins.

   * After Jenkins finishes installing the plugins, enter the required information on the "Create First Admin User" page. Click "Save and Continue" to proceed.

   * User name: [Enter username]

   * Password: [Enter password]

   * Confirm password: [Confirm password]

   * Full name: [Enter full name]

   * E-mail address: [Enter email address]
                                                                                                                          [Save & Continue button]

  * click "Save and Finish".


      How to stop Jenkins:

   -> Go to the "Services" in Windows.
   -> Select (or search for) "J".
   -> In the left side, you will see the "Stop" option.

         How to restart Jenkins:

  -> One way is a safe restart. Go to the URL of Jenkins:
        http://localhost:8080/safeRestart
  -> Jenkins will try to pause jobs and restart once all running jobs are either finished or paused.


         Jenkins is restarting banner:

       This will be displayed on most Jenkins pages. You can use it to let users know what is happening. 
       A default message will be added if you don't supply one.

=====================================================

DAY-11           DATE:6-2-2025


             PLUGIN INSTALLATION:~

 THERE ARE 2 WAYS TO UNSTALL THE PLUGINS

 1> Automatically

 2> manually

 1>AUTOMAICALLY :> once we login to jenkins GUI left side you will be seen the option of manage jenkins click on manage
                   jenkins  we have system configuration

 ==>> click on plugins go to available plugins

 ==>> search for the plugin which is required 

 ==>> select the plugin under the list one you select the plugin install button  will be highlighted them click on install button

 2>MANUALLY :> under plugins tab go to available plugin and search for ansible plugin and click on the plugin which is required
               once you click on the plugin new	 tab will be open the click on the release, under release we will see the various
               version of the specific go for the plugin which is required the specific version under the installation option we 
               can see the direct link option we have to click on the direct link plugin will get downloaded to under local machine



Plugins definition:-
 
           Where we can add, remove, disable or Enable plugins that can Extend the functionality of Jenkins.
 
           → When we install the plugin in automatic way plugins Extention is JPI (Jenkins plugin) when Extention.
 
           we install the plugin in manually way plugin Extention is HPI (hudson plugin)
 
How to uninstall the plugins:-
 
          Manage Jenkins → plugins → Install plugins
 
          → Search Plugin name which we wanted to uninstall select the plugin and then uninstall button will be high lighted once clicked on uninstall,
              plugin will get uninstall.
 
How to update the plugins
 
           Manage Jenkins → plugins → updates
 
           → Select the plugin and then update button will be highlighted once clicked on update, plugin will get update.
 
Here's how to get this into a Word document:
          * Copy the text above.
 
          * Open a new Microsoft Word document.
 
          * Paste the copied text into the document. (You can use Ctrl+V or right-click and select "Paste")
 
          * Format the text as needed within Word. You can adjust font, spacing, add bullet points, etc.
 
          * Save the document. Choose a location and file name, and save it as a .doc or .docx file.
 
   → Select the plugin and then update button will be highlighted once clicked on update, plugin will get update.
   → In Real time we should not update the plugins directly, Reason being there may be the challenges Encountered. 
      It will be recommended to plugins in our local machines where other team members will not effected. If any thing goes wrong.
 
How to create the users?
 
     Manage Jenkins → Security → Users (Create/Delete/modify users that can log in to this Jenkins.)
 
   → Click on the users we can see the create user option after clicking on the user option we can see the username, password, confirm password,
       full name, Email address then click on create user.
 
How to give permission to users:-
 
    Manage Jenkins → Security (Secure Jenkins; define who is allowed access/use the system)
 
    → Best click on that there we can see Authorization under that you will see add user button, after click on that button we will get user id after giving
      user id then click on "Ok" button, after that we have to see user is added then we have to give required permission to the user by checking the box 
       (The minimum access is to give over all read)
 
    → By Default what ever we create users for Jenkins will get stored in Jenkins' own users data base.
 
    → This is suitable for smaller setup where you have no Existing user data base elsewhere. Other option is LDAP (Lightweight directory Access protocol)
 
Authorization Strategy:-
 
       By default we will see project based authorization matrix with these we can manage the authorization based on the options available under strategy.
 
             Example: Credentials, Agent, Job, Run, Etc...
Matrix authorization strategy:-
 
          Matrix Authorization allows configuring the lowest level Permissions, such as starting new builds, configuring items, or deleting them individually.
has context menu



 JENKINS PROJECT (PROJECT (OR) JOB BOTH ARE SAME)

  IT IS A COMBINATION OF ONE OR MORE TASKS

 ==>FREE STYLE PROJECT:~

    classic ,general-purpose job type that checkes out from one scm,executes build steps serially followed by post -build steps like archiving 
    artifacts and sening email notifications.

 ==>MAVEN PROJECT:~

    Build a maven project, jenkins takes advantages of your pom file and drastically reduces the configuration 

 ==>PIPELINE:~ 

    Orchestrates long-running activities that can span multiple build agents. Suitable for building
    pipelines (formerly known as workflows) and/or organizing complex activities that do not easily
    fit in free-style job type.

 ==>MULTI-CONFIGURATION PROJECT:~

    Suitable for projects that need a large number of different configurations, such as testing on
    multiple environments, platform-specific builds, etc.

 ==>FOLDER:~

    Creates a container that stores nested items in it. Useful for grouping things together. Unlike
    view, which is just a filter, a folder creates a separate namespace, so you can have multiple things


 ==>MULTI BRANCH PIPELINE:~

    Creates a set of Pipeline projects according to detected branches in one SCM repository.


 ==>ORGANIZATION FOLDER:~

    Creates a set of multibranch project subfolders by scanning for repositories.



        HOW TO CREATE THE JOB OR PROJECT :~

  In jenkins GUI will see the "+ new items" click on that new item the item name then select the item type once select any of the item
  click on "ok" button which is highlighted
 
 ==>> job configuration is conists of general (where we cangive information or discription about the project)

 ==>> source code management where we will be passing url of the repositories

 ==>> build triggers (in what way we wanted to trigger or build the job)

 ==>> build environment

 ==>> build steps (where we can add tasks)

 ==>> post-build actions


      HOW TO GET A FREE STYLE LEARNING JOB:~

 ==>> NEW ITEM (GIVE THE JOB NAME)

 ==>> select an item then click on "ok"

 ==>> go to the build steps configuration of jbos click on build steps dropdown and select execute windows batch command

 ==>> and just type "dir" and click on save 

 ==>> and click on build now option in the leftside and we can check there console output



                        BLUE OCEAN:~

   WHAT IS BLUE OCEAN ?

 * blue ocean rethinks the jenkins user experiences designed from the ground up for jenkins pipeline and comatible with freestyle jobs 

      
========================================================


 DAY-12                         DATE:7-2-2025



1) what if Jenkins user forget the password? 
   As a jenkin administrator there is a provision to reset the users credentials

   manage jenkins-->security-->users

   go for the user which need to be reset click on security(left side option)

   there you will see the password and confirm password and there you can change the password and click on save.

  once as a administrator change the password again you need to inform to the user please follow below steps to change the password.

  once logged in to user Jenkins gui click on username(top right corner) click on security there you can change the password click on submit

2) what if Jenkins administrator forget the password?(task)

   If a Jenkins administrator forgets the password, they can reset it using one of the following methods:

   Method 1: Reset via CLI (If Available)

   Method 2: Delete the Admin Password from config.xml

   Method 3: Reset Admin Password via User XML File

   Method 4: Check Initial Admin Password (For Fresh Installations)

      slaves, Nodes, agents(same in Jenkins)

3)  Jenkins Folder structure:

  In windows os we can see all Jenkins information and configuration details under the path
  c:\ProgramData\Jenkins\.jenkins

  under .Jenkins folder we can see the users folder(where all the Jenkins users data available)

  users folder(where all the Jenkins users data available)

  workspace(where all the configured jobs information available)

  secrets(where all the configured secrets are available)

  plugins(all the plugins)(which are installed manually and automatically) available

  nodes(where all the configured nodes are available)
 logs(we can see slaves)(if configured and tasks logs are available.

  apart from the above folders there is Jenkins configurational file namely config.xml
  (if at all changing the config.xml) first take the backup of file or copy the xml in some where else.

  we can also see the Jenkins log in Jenkins gui 

* path: manage jenkins-->status information--> system log --> then all Jenkins log once click on that you will see the log details

        we can see the Jenkins version bottom right corner in Jenkins gui and also

* path: manage jenkins-->status information--> about Jenkins

        website:crontab.guru
        (https://crontab.guru/)

     look for webhooks in git (task2)

* what: A Git webhook is a way for a repository to send real-time notifications to external services when certain events occur, such as a push, pull request, or merge. Webhooks are commonly used for CI/CD automation, triggering deployments, notifications, and integrations with other tools.

=> why:Why Use Git Hooks?
   Enforce coding standards (e.g., run linters before committing)
   Automate tasks (e.g., generate documentation on commits)
   Improve security (e.g., prevent committing secrets)
   Streamline workflows (e.g., trigger CI/CD processes locally) 

* purpose: Git hooks serve different purposes depending on when they are executed. There are two types:

1. Client-Side Hooks (Run on Developer's Machine)
   Used for automation before sending changes to a remote repository.

 pre-commit → Runs before a commit is created (e.g., check code style).
 commit-msg → Runs after commit message is written (e.g., enforce commit message format).
 pre-push → Runs before pushing changes (e.g., run tests).
 post-commit → Runs after a commit (e.g., send notifications).

2. Server-Side Hooks (Run on Remote Repository)
   Used to enforce policies and automate server-side processes.

  pre-receive → Runs before accepting a push (e.g., check branch policies).
  update → Runs when a branch is updated (e.g., enforce rules).
  post-receive → Runs after a push is completed (e.g., trigger deployments).

4) ways to trigger the Jenkins jobs

setup automated action that start your build based on specific events,like code changes or scheduled times.

a) Trigger builds remotely (e.g., from scripts)
   in order to use this option  or use this trigger first we need to generate the authentication token of the job

   Enable this option if you would like to trigger new builds by accessing a special predefined URL (convenient for scripts).You'll need to provide an authorization token in the form of a string so that only those who know it would be able to remotely trigger this project's builds.This is most useful when your Jenkins instance grants read access to this job to anonymous users.When that's not the case, Jenkins will reject requests sent to the trigger URL even when the correct token is specified.
  Use the following URL to trigger build remotely: JENKINS_URL/job/rasjsw/build?token=TOKEN_NAME or /buildWithParameters?token=TOKEN_NAME

b) Build after other projects are built:

   Set up a trigger so that when some other projects finish building, a new build is scheduled for this project. This is convenient for running an extensive test after a build is complete, for example. we need to pass the job name (which are configured already) under projects to watch tab

  under projects to watch 4 options available 
  Trigger only if build is stable
  Trigger even if the build is unstable
  Trigger even if the build fails
  Always trigger, even if the build is aborted

c) Build periodically:

  This field follows the syntax of cron (with minor differences). Specifically, each line consists of 5 fields separated by TAB or whitespace:
  MINUTE HOUR DOM MONTH DOW

  MINUTE   Minutes within the hour (0–59)
  HOUR	   The hour of the day (0–23)
  DOM	   The day of the month (1–31)
  MONTH	   The month (1–12)
  DOW	   The day of the week (0–7) where 0 and 7 are Sunday.

  To specify multiple values for one field, the following operators are available. In the order of precedence.

  for reference or practice go with the website crontab.guru

d) GitHub hook trigger for GITScm polling
   When Jenkins receives a GitHub push hook, GitHub Plugin checks to see whether the hook came from a GitHub repository which matches the Git repository defined in SCM/Git section of this job.

e) poll scm
   Configure Jenkins to poll changes in SCM.

  Trigger (way of running in the job)

  apart from the above 5types (triggers) we can also trigger jobs manually.

  Trigger-->way of running the job



================================================================== 


 DAY:13                                     DATE:8-2-2025     



** FEB 8 SATURDAY EVERY MINUTE EVERY HOUR


1) Job configuration of build periodically trigger and poll scm trigger

   create new item(job or project)

   go for triggers tab

   check the box build periodically or poll scm

   once clicked on checkbox schedule comment box will be open there we need to schedule as per requirement

 example: to schedule a job at every minute every hour on Saturday and February

          * * 8 2 6

          where first star means every minute

          where second star means every hour 

          where number 8 is day of the month

          where 2(February) is the month

          where 6(Saturday) is the day of the week

          click on save and check for the jobs

          whether running as per the schedule or not

2) Build after other projects are build:

   create more than one job(s) then in triggers option select build after other projects are build once checked that option need to pass projects to watch    name then click on save and check

 example: job1, job2, job3

          for job2 put the upstream project as job1

          for job3 put the upstream job as job2

   when we build the job1, once job1 completed automatically down stream projects has to be build

   for job2 once select the build after other projects are build and then select sub option trigger even if the build fails then save for job1 do some    mistake wantedly and check for all the jobs

  pipeline project

  we are going for pipeline project in order to secure the CICD pipeline code by storing in any of the repositories(GitHub, bitbucket, gitlab)

  sample helloworld pipeline script creation click on new item select pipeline and click on ok then go for pipeline option in configuration where we can   define or write the pipeline
  script you can write script tab or else we can take it from scm

   In the script tab click on dropdown option to try sample pipeline

pipeline {
    agent any

    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
    }
}


 click on save

  make sure that stage view plugin should be installed so that we can see stages

  Rebuild vs Replay

  when we use rebuild we are not changing anything but where as replay gives us provision to change the code then and there. 

  Replay we can also use it as one of the troubleshooting mechanism

  if we do not know how to write pipeline script code we can take the advantage of snippet generator in pipeline syntax option
  (pipeline syntax option will only visible when you create pipeline job or project)
  this snippet generator will help you learn the pipeline script code which can be used to define various steps. pick a step you are interested in from the   list configure it,
  click generate pipeline script and you will see a pipeline script statement that would call the step with that configuration you may copy and paste the   whole statement in to your script or pickup just the options you care about.

 example: to print message
          in sample step of snippet generator we can search for the echo where is a step echo print message then what message you want to print we have to           pass if in message block then click on generate pipeline script which will give us script to print message

  by default pipeline execution will work on serial mode (one by one). if the previous stage is passed then only it will go for next or further stages.    



============================================================




DAY:14                           DATE:11-2-2025



 HOW TO CREATE A NEW ITEM PROJECT?

 * click on new item given the job name and select the item scroll down to bottom there you can see copy from option in that copy from tab we need to pass    the job name which we want to need to pass the existing job name which we want to make use of existing job configuration

EXAMPLE:~ create a job 10 .(take the reference of job8 configuration)


 HOW TO CHNAGE THE DEFAULT PORT NUMBERS OF JENKINS?

 * go to the path c:\programfiles\jenkins
 * in that folder find the jankins.xml file 
 * search for "--httpport=8080"in jenkins.xml file where 8080 is the default port number in order to change this default port number
   we should replace 8080 by our own port number then save it once modified this jenkins.xml file restart the jenkins server

 NOTE:~ before changing any jenkins configuration (or) port number better to take backup oforiginal file for safer side


 WHAT IF JENKINS ADMINISTRATOR FORGET FORGET PASSWORD?  
 
 * go to jenkins home directory C:\programData\jenkins\.jenkins in that path open config.xml file search for <use secirity> true</use security> replace true    with false <use security>false<\usesecurity> then save it then browser access the jenkins url where you will not see any login details & user detail in    jenkin GUI

 * go for the manage jenkins "security" undersecurity realm (where we change config.xml file from true to false it will be none) then we need to change    "none" to "jenkins" own user database 

 * authorization (when we chnage config.xml file from true to false authorization will change to any one can do any thing) here we need to change from any    one can do any thing to either martix based or project based strategy

 * once you select martix based or project based strategy under that uncheck the anonymous and click on add user button and add the admin user and give the    role  as administrator

 * then we have to save it;    manage jenkins -->user -->adminuser



 -> change the password then we have to save it.
 
 -> Now we need to restart the Jenkin Server.
 
 -> Notes Better take backup of config.xml file for Safe Side.
 
 -> Before restarting Jenkins
 
 -> once restarted check with admin user whether admin user has all the privileges or not.
 
 -> then go back to config.xml file and modify user security tag from false to true then restart the Jenkin server.
 
 Jenkins.io/doc/book/pipeline/jenkinsfile/#using-environment-variables

 Using Jenkins Environment Variables
 
 Jenkins pipeline Exposes Environment variables via the global variable Env, which is available from anywhere within a Jenkins file.
 
 -> Below are some environment variables.
 
 BUILD_ID - The current build ID, identical to BUILD_NUMBER for builds created.
 
 Likewise we have "BUILD_NUMBER", "BUILD_TAG", "BUILD_URL", "JENKINS_URL", "JOB_NAME", "NODE_NAME", "WORKSPACE"
 
 Here's how you can create your Word document:


 Jenkins pipeline Exposes Environment variables via the global variable Env, which is available from anywhere within a Jenkins file.
 
 -> Below are some environment variables.
 
 BUILD_ID - The current build ID, identical to BUILD_NUMBER for builds created.
 
 Likewise we have "BUILD_NUMBER", "BUILD_TAG", "BUILD_URL", "JENKINS_URL", "JOB_NAME", "NODE_NAME", "WORKSPACE


 Ex: Use the Jenkins file (Declarative pipeline) - https://jenkins.io/doc/book/pipeline/jenkinsfile/#using-environment-variables
 
 copy this code and create item in Jenkins for pipeline job replace the script with copied code and save it and run (or) build it Expected output should be   "Running 1 on http://localhost:8080/"
 
 Task - Even though we can change the default port number of Jenkins from 8080 to other port but here still showing default port number only figure it out.
 
 How to Parameterized the Jenkins Job?
 
 -> Parameters allow you to prompt users for one or more inputs that will passed into a build.
 
 -> Create New Job in General configuration of that job you can see the option "This project is parameterized" need to check box that and there you will         option add parameter dropdown. Click on that you will see various parameters those are Boolean choice, Credentials, file, multi-line string, password,       Run, string.
 

 -> For example, click on choice parameter (defines a simple string parameter, which can be selected from a list you can use it during a build) give the     name as Env, and choices you can give more than one environment name and under description that will be shown to the user and click on Save.
 
 -> When you check the job to be triggered you will see build with Parameters option click on that and select the choices which we configured and go for the     build button.
 
 -> Another way of Creating Jenkins user?
 
    Manage Jenkins -> security -> directon the disable "keep"
 



















