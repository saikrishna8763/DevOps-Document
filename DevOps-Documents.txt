why DevOps?

traditional water fall model

The waterfall model is a project management methodology that breaks down a project into a series of sequential phases.
It's named after the way water cascades downward,

what are the steps involved in waterfall model

* Requrement and gathring analysis
* Design
* Implement
* Test
* Deploy
* MAINTENANCE

How it works?
* The model is linear, with each phase completed before moving on to the next 
* The model is rigid, with no flexibility to go back and change previous steps 
* The model is well-suited for projects with fixed budgets, timelines, and requirements  

What it's used for
* The waterfall model is used in software development and product development 
* It's also used in certain areas of engineering design 


What are its benefits? 
* The model can help minimize risk by integrating comprehensive documentation and upfront planning
* The model can help align with traditional project management approaches


What are its drawbacks?
* The model can be less flexible than other methods, like Agile 
* The model can lead to delayed testing, which can result in late discovery of mistakes and flaws 
* The model can lead to lower customer satisfaction due to a lack of customer feedback 


AGIL METHODOLOGY

Agile methodology is a project management framework that breaks down projects into phases,  
or sprints, and encourages teams to reflect and improve after each sprint
It's an iterative approach that's designed to help teams develop products in environments that are subject to change.

1. FIRST ITERATION
* In this agile methodology each project is broken up into several iterations.

2. SECOUND ITERATION
* All iteration should be of the same time duration between 2 to 8 weeks.

3. THIRD ITERATION
* At the and of each iteration a working product should be delivered.


DEVELOPMENT WITHOUT DEVOPS CULTURE.

* Relese and Deploy
* Unpredictable issues
* Blame game
* Lack of monitoring 


DEVELOPMENT WITH DEVOPS CULTURE.

* Streamlined Deliveries
* Continuous monitrrings and feedback
* Team work in collaboration

WHAT NEEDS TO BE DONE

* Use system with little (or) no waiting time
* Use system with update code 


OPERATIONS 

* System should be up and running most of the time
* System required for easy administration
* Effective monitoring and feedbacks system should be established


WHAT EXACTLY IS DEVOPS IN REAL LIFE 

DEVELOPMENT TEM:
* CODE
* PLANE
* TEST
* BUILD

OPERATION TEM
* RELESE 
* DEPLOY
* OPERATE
* MONITOR


WHAT DEVOPS IS NOT

* Devops is not a role person (or) organization
* Devops is not a separate team
* Devops is not a product (or) a tool
* Devops is not about just writing scripts (or) implementing tools

what is DevOps?

DevOps is a practice that allows a single team to manage the entire application development life cycle, 
that is development, testing, deployment and monitoring


What does DevOps do?

Integrates developers and operations teams improves collaboration and productivity by:
Automating infrastructure
Automating workflows
Continuously measuring application performance

Skills of a DevOps Engineer

Tools:
version control-GIT
continuous Integration- Jenkins
Virtualisation/Containerisation-Docker/Kubernetes
configuration management-puppet/ansible
monitoring-Nagios

Networking Skills:
General networking skills
Establishing connection between the containers 
port forwarding/container orchestration

Other Skills:
people skills
process skill
customer skills and empathy
cloud awareness

===========================================================================


day 2: date:22/01/2025




DEVOPS LIFE CYCLE : PLAN

1> FIRST STAGE: of devops cycle where you plan terack visualize and summarize your project before 
   working starting it
  
* PLANNING TOOLS:
 jira
 trella
 tricentis

2> SECOUND STAGES: of devops cycle where the developers write their code

* CODING TOOLS:
  eclipse
  git


3> Build is a pre release version and is identitied by a build number rather than by a release number

* BUILDING TOOLS:
  jenkins
  maven
  gradle
  apache ant
 
4> TEST: process of executing automated test as part of the software delivery pipeline in order to obtain feedback on the 
         business risks associated with a software release as rapidly as possible

* TESTING TOOLS:
  jmeter
  junit
  Selenium

5> RELEASING: this phase help to integrate code into a shared repository using 
   which you can detect and locate errors quickly and easily 

* RELEASING TOOLS:
  travis cl 
  gitlab
  bamboo

6> DEPLOY: manage and maintain development and deployment of sostware systems and servers in any compatational environment

* DEPLOYING TOOLS:
  aws
  ansible
  chef

7> OPERATE: this phase is to keep the system upgraded with the latest update 

*  OPERATING TOOLS:
   nagious


                         :DEVOPS LIFE CYCLE:


          CLOUD: SERVERS
                ^
          DEVELOPERS : CODE
                ^
          GIT : VERSIONCONTROL  >>>JENKINES
                ^
          CONTINUOUS TESTING    >>>SELENIMUM
                               
                                >>>CONTAINERZATION >>{DOCKER} / VIRTUALIZATION >>{KUBERNETS}
                               
                ^               >>>CONFIGURATION MANAGEMENT
                ^

          CONTINUOUS MONITORING >>>NAGIOUS






     WINDOWS -- OS 
 
 source code management --GIT

 BUILD TOOLS --APACHE MAVEN

 WEB SERVER --APACHE TOMCAT

 CI/CD --JENKINS
 
 1 >> MINI PROJECT


=========================================

           LINUX


 CLOUD >> CLOUD COMPUTING 

 INSTANCE --AWS/AZURE
 
 LINUX 

 source code management --GIT

 BUILD TOOL --APACHE TOMCAT

 CICD --JENKINS

 1 >>MINI PROJECT


============================================

 CONTAINERIZATION --DOCKER

 CONTAINER ARCHACTION --K8s

 CONFIG MANAGEMENT --ANSIBLE

 MONITORING --PROMETHEUS WITH GRAFANA

 CLUD SERVICES 

 IAC --TERRAFORM

===============================================

          Topics:

1. Why do we need version control?

Collaboration

Storing versions

Figuring out what happened

Backup



2. What is version control?

Version control is a system that documents changes made to a file or a set of files.

It allows multiple users to manage multiple revisions of the same unit of information.

It acts as a snapshot of your project over time.



3. Types of Version Control:

Local Version Control (LVC):

The practice of having the version database on the local computer.

A local database keeps a record of the changes made to files in the version database.


 LOCAL VERSION CONTROL: >>ISSUE

* ISSUE: multiple people parallely working on the same project

* SOLUTION: centralized version control



Centralized Version Control (CVC):


*Local version control issues are resolved by centralized version control.

*in entralized version control a central repository is maintained where all versioned files are kept.

*Users can check out and check in files from their different computers at any time.



3. Issues:

If the central server fails, the entire system goes down.


4. Solution:

Distributed version control

Distributed Version Control (DVC):


*The version database is stored at every user's local system and at the remote server simultaneously.

*Users can manipulate local files and then upload changes to the remote server.

*If any server fails, another client-server can be used to recover the data.


                      GIT


           What is Git?


 * Git is an open-source distributed version control system (DVCS) which records changes made to the files,
   laying emphasis on speed, data integrity and distributed, non-linear workflows.

    The Git File Workflow

The remote repository is the server where all the collaborators upload changes made to the files.

       [Remote Repository]

 Developer A
 * Working Directory
 * Staging Area
 * Local Repository


Developer B
 * Working Directory
 * Staging Area
 * Local Repository

Commands:
 * Clone
 * Pull
 * Fetch
 * Push
 

LOCAL REPOSITORY:

 * Local repo is the user’s copy of the version database.

 * The user accesses all the files through the local repository and then pushes the changes made to the Remote Repository.

work Space:

 * Look space is user’s active directory.

 * The user modifies existing files or creates new files in this space. His tools track changes compared to your local Repository.

Stage (or) index area:

 * Stage is a place where all the modified files marked to be committed are placed.

Clone:

 * Clone command creates a copy of an existing Remote Repository inside the local Repository.

Commit:

 * Commit command commits all the files in the Staging area to the local repository.

Push:

 * Push command pushes all the changes made in the local Repository to the Remote Repository.
   Let me know if you would like any specific parts


Fetch Command:

 * Fetch command collects the changes made in the Remote Repository and copies them to the local Repository.
   This command doesn't affect our workspace. 

Pull / Merge:

 * Pull like fetch, gets all the changes from the remote repository and copies them to the local Repository.

 * Pull merges those changes to the current working directory.

===============================================================


day-3: date:23/01/2025

    interview What branching strategies are used:

=> Trunk-based development: Most work is done in a single trunk, which is usually called "master" or "main"
 
=> Release branching: A development branch is cloned after it has enough features
 
=> Feature branching: A feature is changed in a specific branch until it's merged with the master
 
=> Task branching: Each task gets its own branch
 
=> Hotfix branching: A branch is created from the main branch to fix critical issues


	
        branching strategies are used: IN MY OROJECT:~

    BASE -main (or) major -snapshot of project
    
    DEV

    QA/TESTING

    RELESE BRANCH

    HOTFIXES -PRODUCTION -BASE

    PR - PULL REQUEST


  what is git rm --cached <filename>

* cached. Removes the file only from the Git repository, but not from the filesystem.

  By default, the git rm command deletes files both from the Git repository as well as the filesystem.

  Using the --cached flag, the actual file on disk will not be deleted.


                         VS



  GIT RESTORE FILENAME:

* git restore will restore the file to the last committed version, effectively undoing any changes that have been made since then.

* The file has to be part of an earlier commit, "restore" 


               GIT COMMANDS:



* Git init:

 command initializes a new git repository in the current directory. It sets up
 the necessary files and directories for version control.
 allowing you to start tracking changes to your files.

* Git init:

 The git init command creates a new git repository, used to connect an existing directory to a git repository or initialize a new empty repository.

*Git clone:

 command is used to create a copy of an existing git repository. It downloads the
 entire repository, including the work directory, the git history, and all branches.

*Git status:

 command displays the state of the working directory and the staging area. It lets
 you see which changes have been staged, which haven't, and which files aren't being tracked by git.

* Status output does not show you any information regarding the committed project history.

* Git log:

  command displays committed snapshots.
  It lets you list the project history, filter it, and search for specific changes.
  Git log only operates on the committed history.

* Git config:

  git config command is a convenience function that is used to set configurations values
  on a global (or) local project level. These configuration levels correspond to:
  Git config text files. Executing git config will modify a configuration text file.

* Git alias:

  are a powerful workflow tool that creates shortcuts to frequently used git commands.
  Using git alias will make you a faster and more efficient developer.

* Git add:
  command adds a change in the working directory to the staging area. 
  It tells git that you want to include updates to a particular file in the next commit.

* Git commit: Key points:

  1. Saves staged changes.
  2. Creates a commit message.
  3. Tracks changes.

  The commit command is used to save your changes to the local repository. 
  Note that you have to explicitly tell git which changes you want to include in a commit before running the git commit command.


* Git commit -m "msg":~ The command lets us write the commit message on the command line.

* Git commit -am "message": The command used for only for exeasting file with out adding we can commit.

*  Creating a New Branch:

 * Command: git branch <name>
 * Example: git branch new_branch

Checking Current Branch:
* Command: git branch

Switching Branches:

 * Commands:

   * git checkout <branch_name>
   * git switch <branch_name>

Deleting a Branch:

 * Command: git branch -d <branch_name>

Viewing Changes:

 * Command: git diff
 * Description: Shows changes made between two to the file.

Viewing Staged Changes:

 * Command: git diff --staged

Creating and Switching to a New Branch:

 * Command: git checkout -b <branch_name>
 * Example: git checkout -b raja

   create a new branch and switch to that new branch (raja)
   
Git Reflog:

 * Description:  Reflog an isolated branch to maintain an accurate running history of modifications made to your repository.
 * Example: git branch like main , saikrishna it show all commited (or) aney changes will show


       Git Stash:

 * Command: git stash

 * Description: Saves committed changes (both staged and unstaged), removes them from your working copy,
   and then reverts them for later use. (To save temporary work)
 
 * To exit from git stash: git stash show -p

 * To show your files: git stash pop

Git Log:

 * Command: git log --summary

 * Description: Provides a detailed log of commits along with a summary of the changes made in each commit, 
   such as added or deleted files, renamed files, and changes in file permissions.

Git Commit --amend:

 * Command: git commit --amend -m "message"
 * Description: Changes  (or) replace the last commit message. 

Git tag command:

* commit tags provide on alias for commit ID 
  
  git tag -a <annotation> -m "mesage"

* you can also view all the tages you have created 

  git tag

* adding a tag to one of the previous commits 
  
  : git tag --a<annotation> <commit id> --m <message>

* commit id can be obtained from git logs

* allthese tags can be viewed in git 
   : git show <tag -name>

* git push 


 :~ the current branch test has no upstream branch

 :~ to push the currentbranch and set the remot as upstream,use


* you created a branch in local but not in git hub so this command will use

  : git push -set -upstream orgintest



* create a new fork:

  A fork is acopy of arepository forking a repository allows you to freely experiment 
  
  with changes without affecting the orginal project.












 




         

           






















 